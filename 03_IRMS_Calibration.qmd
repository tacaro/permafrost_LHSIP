---
title: "IRMS Data Calibration"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# How does this work?

In the previous Quarto document, `02_IRMS_Data_Reduction.qmd` we converted .dxf files into a tidy peak table in both `.RDS` and `.xslx` formats. We mapped compound IDs onto those samples. Here we read those data in and calibrate.

## Setup

```{r}
rm(list=ls()) # Clear the environment

library(tidyverse)
library(isoprocessor)
library(isoreader)
```

### Load data

```{r}
sample_peak_table <- read_rds("cache/iso_peak_table_mapped.RDS") |> 
  mutate(
    type = case_when(
      str_detect(file_id, "[Zz]ero")      ~ "on_off",
      str_detect(file_id, "H3")           ~ "H3_factor",
      str_detect(file_id, "F8")           ~ "F8_std",
      str_detect(file_id, "FH_5")           ~ "FH5_std",
      str_detect(file_id, "FSH_9")           ~ "FSH9_std",
      str_detect(file_id, "F9")           ~ "FSH9_std",
      str_detect(file_id, "blank")           ~ "blank",
      str_detect(file_id, "Blank")           ~ "blank",
      str_detect(file_id, "no inject")           ~ "blank",
      str_detect(file_id, "cleaning")           ~ "blank",
      str_detect(file_id, "BAME")           ~ "BAME",
      str_detect(file_id, "PPALK")           ~ "PPALK",
      TRUE                            ~ "sample"
    )
  ) |> iso_make_units_implicit() |> 
  # add peak_id column which is just a unique identifier
  mutate(peak_id = row_number()) |> 
  mutate(analysis = parse_number(Analysis))
  
sample_peak_table |> pull(type) |> unique() # should just be sample, F8, FH5, FSH9

# inspect this list to see if any non-samples made it through the filtration
sample_peak_table |> filter(type == "sample") |> pull(file_id) |> unique()

write_rds(sample_peak_table, file = "cache/sample_peak_table.rds")
```

Check how is d2H vs H2 calculated? It doesn't seem to be just the d2H of compound - the mean H2 value ... must be something else? Ask seb.

```{r}
example_peak_map <- readxl::read_excel("EXAMPLE_peak_table_raw_data.xlsx")


example_peak_map_i <- example_peak_map |> filter(analysis == 10901)

mean_h2_i <- example_peak_map_i |>
  filter(compound == "H2") |> 
  pull(`d2H [permil]`) |> 
  mean()

example_peak_map_i_small <- example_peak_map_i |> 
  select(compound, `d2H [permil]`, d2H_vs_H2) |> 
  mutate(mean_h2 = mean_h2_i,
         d2H_diff_to_H2 = `d2H [permil]` - mean_h2)
```

### Load standards data

```{r}
# load the true d2H of the standards
standards <-
  tibble(
    standard = readxl::excel_sheets("data/GC-IRMS/standards.xlsx"),
    data = map(standard, ~readxl::read_excel("data/GC-IRMS/standards.xlsx", 
                                             sheet = .x))
  ) |> 
  unnest(data) |> 
  filter(!is.na(true_d2H)) |> 
  select(type = standard, compound, true_d2H)

# inspect the standards:
standards |> iso_make_units_explicit() |>  knitr::kable(digits=2)
```

## Analyte Peaks Overview

```{r}
sample_peak_table |> 
  filter(!is.na(compound) & compound != "H2") |> 
  iso_plot_data(
    x = area2, y = d2H, 
    color = type,
    label = Analysis,
    size = 2,
    points = TRUE,
    #shape = 1
  ) +
  scale_color_brewer(palette = "Dark2") + 
  scale_x_log10(breaks = c(1, 2, 3, 6, 10, 25, 50, 100, 200, 400)) +
  theme(panel.grid.minor = element_blank()) +
  facet_grid(type~., scales = "free_y") 
```

# Memory effect calculations

```{r}
# alternative memory calculation not used in the end but included for completeness
sum_memory <- function(area, delta) {
  stopifnot(length(area) == length(delta))
  mem <- 0
  mem_area <- 0
  for (i in seq_along(area)) {
    if (area[i] > mem_area) {
      # new area bigger --> takes over entire memory
      mem <- delta[i]
      mem_area <- area[i]
    } else {
      # new area smaller --> partially replace memory
      mem = ((mem_area - area[i]) * mem + area[i] * delta[i])/(mem_area)
    }
  }
  return(mem)
}
```

```{r}
# calculate memory effect
memory_effects <- 
  sample_peak_table %>%
  # focus on analyte peaks
  filter(is.na(compound) | compound != "H2") %>%
  select(file_id, peak_id, compound, rt, area2, d2H_vs_H2) %>%
  # cross join all peaks
  { left_join(
    ., 
    select(., file_id, compound_i = compound, rt_i = rt, area2_i = area2, d2H_vs_H2_i = d2H_vs_H2) %>%
      iso_strip_units(),
    by = "file_id"
    ) } %>%
  # use prior peaks for memory calculation
  group_by(file_id, peak_id, rt) %>%
  filter(rt_i <= rt) %>%
  ungroup() %>%
  # summarize for each file and peak
  group_by(file_id, peak_id) %>%
  summarize(
    mem_d2H = 
      if_else(
        n() == 1, 0, 
        sum(d2H_vs_H2_i[rt_i < rt] * area2_i[rt_i < rt]) / sum(area2_i[rt_i < rt])),
    mem_d2H_sum = sum_memory(area2_i, d2H_vs_H2_i),
    .groups = "drop"
  ) 

sample_peak_table_with_memory <-
  sample_peak_table %>%
  left_join(memory_effects, by = c("file_id", "peak_id"))
```
