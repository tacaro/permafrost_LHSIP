---
title: "GC-FID Data Processing"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Setup

```{r}
library(tidyverse)
library(ggpmisc)
library(rms)

# Clear environment
rm(list = ls())
```

## Data Import

Import the required R script for reading default chromeleon export files.

```{r}
source("source/read_chromeleon_export.R")
source("source/rename_FAs.R")
```

### Import metadata

```{r}
FID_sample_metadata <- readxl::read_excel("data/sample_matrix.xlsx") |> 
  select(
    sample_id,
    sample_num = id, # rename this column
    core,
    temp, 
    inc_time_d = dt
  )
```

### Standards Import and Cleanup

```{r}
root <- file.path("data", "GC-FID_Data", "2023-08-28_TAC_PAIBE-External-Standard-Curve/")

file_list = list.files(path = root)
file_list <- file_list |> 
  str_subset("blank", negate = TRUE) |> 
  str_subset("Blank", negate = TRUE) |> 
  str_subset("GCMS-STD", negate = TRUE) |> 
  str_subset("BLK", negate = TRUE) # remove procedural blanks

sample_names <- file_list |> 
  str_replace("FID....._", "") |> 
  str_replace("_100ul-nhex.xls", "") |> 
  str_replace(".xls", "")

FID_all_data_stds <-
  tibble(
    sample = sample_names,
    file = file_list,
    data = map(file.path(root, file), read_chromeleon_export),
    injection_details = map(data, "injection_details"),
    integration_results = map(data, "integration_results")
  )  |>  select(-data)

FID_results_stds <- FID_all_data_stds |> 
  select(-injection_details) |> 
  unnest(integration_results) |> 
  filter(nchar(`Peak Name`) > 0)

PAIBE_external_standard <- FID_results_stds |> 
  filter(
    str_detect(sample, "PAIBE"), # filter to PAIBE injections only
    str_detect(`Peak Name`, "PAIBE"), # filter to PAIBE peak only
  ) |> 
  mutate(
    PAIBE_amount_ng = abs(parse_number(sample))
  )

p_PAIBE_inset <- PAIBE_external_standard |> 
  ggplot(
    aes(
      x = Area,
      y = PAIBE_amount_ng
    )
  ) +
  geom_point() +
  stat_poly_line(linewidth = 0.25) +
  #stat_poly_eq(use_label(c("eq", "R2"))) +
  coord_cartesian(xlim = c(0, 20), ylim = c(0, 100)) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.background = element_rect(color = "black"),
        aspect.ratio =1) +
  labs(
    y = "PAIBE mass injected (ng)",
    x = "Peak Area (pA*min)"
  )

p_PAIBE_large <- PAIBE_external_standard |> 
  ggplot(
    aes(
      x = Area,
      y = PAIBE_amount_ng
    )
  ) +
  geom_point() +
  stat_poly_line(linewidth = 0.25) +
  stat_poly_eq(use_label(c("eq", "R2"))) +
  #coord_cartesian(xlim = c(0,100), ylim = c(0, 25)) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  labs(
    y = "PAIBE mass injected (ng)",
    x = "Peak Area (pA*min)"
  )

p_PAIBE_combined <- p_PAIBE_large +
  cowplot::draw_plot(p_PAIBE_inset, x = 47, y = 0, width = 40, height = 200) +
  labs(title = "PAIBE External Standard Curve") +
  theme(aspect.ratio = 1)
p_PAIBE_combined

# save the plot
cowplot::save_plot(filename = "fig_output/PAIBE_std_curve.pdf",
                   plot = p_PAIBE_combined,
                   base_height = 6,
                   base_width = 6)

```

### Calculate standard curve

```{r}
# Generate a linear model for the PAIBE fit
PAIBE_fit <- rms::ols(data = PAIBE_external_standard, PAIBE_amount_ng ~ Area)
# Turn it into a function
peak_area_to_ng <- Function(PAIBE_fit)
```

Test the function:

```{r}
test_dataset <- tibble(
  peak_area.pA = seq(0, 100, by = 1),
  PAIBE.ng = peak_area_to_ng(peak_area.pA)
)

p_PAIBE_large %+%
  geom_line(
    data = test_dataset,
    aes(x = peak_area.pA, y = PAIBE.ng),
    color = "red", linetype = "dashed"
  )
```

Yep, that's our regression line alright.

## Samples Import

### F2s

```{r}
root_F2 <- "data/GC-FID_Data/2023-08-17_TAC_Permafrost_F2s/"

file_list = list.files(path = root_F2)
file_list <- file_list |> 
  str_subset("blank", negate = TRUE) |> 
  str_subset("Blank", negate = TRUE) |> 
  str_subset("GCMS-STD", negate = TRUE) |> 
  str_subset("BLK", negate = TRUE) # remove procedural blanks

sample_names <- file_list |> 
  str_replace("FID....._", "") |> 
  str_replace("_100ul-nhex.xls", "") |> 
  str_replace(".xls", "")

FID_all_data_F2s <-
  tibble(
    sample = sample_names,
    file = file_list,
    data = map(file.path(root_F2, file), read_chromeleon_export),
    injection_details = map(data, "injection_details"),
    integration_results = map(data, "integration_results")
  )  |>  select(-data)

FID_results_F2s <- FID_all_data_F2s |> 
  select(-injection_details) |> 
  unnest(integration_results) |> 
  filter(nchar(`Peak Name`) > 0)
```

### F3s

```{r}
root_F3 <- "data/GC-FID_Data/2023-08-14_TAC_Permafrost_F3s"

file_list = list.files(path = root_F3)
file_list <- file_list |> 
  str_subset("blank", negate = TRUE) |> 
  str_subset("Blank", negate = TRUE) |> 
  str_subset("GCMS-STD", negate = TRUE) |> 
  str_subset("BLK", negate = TRUE) # remove procedural blanks

sample_names <- file_list |> 
  str_replace("FID....._", "") |> 
  str_replace("_100ul-nhex.xls", "") |> 
  str_replace(".xls", "")

FID_all_data_F3s <-
  tibble(
    sample = sample_names,
    file = file_list,
    data = map(file.path(root_F3, file), read_chromeleon_export),
    injection_details = map(data, "injection_details"),
    integration_results = map(data, "integration_results")
  )  |>  select(-data)

FID_results_F3s <- FID_all_data_F3s |> 
  select(-injection_details) |> 
  unnest(integration_results) |> 
  filter(nchar(`Peak Name`) > 0)
```

### Join the sample datasetes and calculate analyte mass

```{r}
FID_sample_results <- FID_results_F2s |> 
  bind_rows(FID_results_F3s) |> 
  # cleanup
  select(-c(`No.`, Amount, `Relative Area`, `Relative Height`)) |> 
  # convert area to ng
  mutate(
    mass_analyte_ng_per_ul = peak_area_to_ng(Area),
    sample_volume = parse_number(str_extract(sample, "\\d{2,3}ul")),
    mass_analyte_total_ng = mass_analyte_ng_per_ul * sample_volume,
    # define the SPE fraction
    fraction = case_when(
      str_detect(sample, "F2") ~ "F2",
      str_detect(sample, "F3") ~ "F3"
    ),
    # parse sample names for joining
    sample_id = str_extract(sample, ".*?(?=-F2|-F3|$)") 
  ) |> 
  # in quantification range of IRMS?
  mutate(
    quantifiable = if_else(
      mass_analyte_total_ng >= 150,
      true = TRUE,
      false = FALSE
    )
  )
```

### Join sample metadata

```{r}
FID_samples <- FID_sample_results |> 
  left_join(FID_sample_metadata, by = "sample_id") |> 
  # remove standards, readychecks, flameoffs
  filter(
    !str_detect(sample, "BAME"),
    !str_detect(sample, "37FAME"),
    !str_detect(sample, "RDYCHK"),
    !str_detect(sample, "FLAMEOFF")
     )
```

### Virtually combine F2s and F3s

```{r}
FID_samples_combined <- FID_samples |> 
  select(
    sample_id, fraction, `Peak Name`, 
    mass_analyte_total_ng, core, temp, inc_time_d
    ) |> 
  mutate(
    mass_F2_ng = case_when(fraction == "F2" ~ mass_analyte_total_ng),
    mass_F3_ng = case_when(fraction == "F3" ~ mass_analyte_total_ng)
  ) |> 
  group_by(
    sample_id, `Peak Name`, core, temp, inc_time_d
  ) |> 
  dplyr::summarize(
    mass_F2_ng = sum(mass_F2_ng, na.rm = TRUE),
    mass_F3_ng = sum(mass_F3_ng, na.rm = TRUE)
  ) |> 
  ungroup() |>
  group_by(sample_id, `Peak Name`) |> 
  mutate(
    combined_sample_mass_ng = sum(mass_F3_ng, mass_F2_ng),
    ) |> 
  # in quantification range of IRMS?
  mutate(
    quantifiable_combined = if_else(
      combined_sample_mass_ng >= 150,
      true = TRUE,
      false = FALSE
    ),
    quantifiable_F2 = if_else(
      mass_F2_ng >= 150,
      true = TRUE,
      false = FALSE
    ),
    quantifiable_F3 = if_else(
      mass_F3_ng >= 150,
      true = TRUE,
      false = FALSE
    ),
  )
```

```{r}
FID_export <- FID_samples |> 
  mutate(
    fraction = case_when(
      fraction == "F2" ~ "glyco-IPL",
      fraction == "F3" ~ "phospho-IPL"
    ),
    # normalize analyte mass to grams of permafrost in extraction (5g)
    mass_analyte_ng_per_g.FID = mass_analyte_total_ng / 5
  ) |> 
  # rename columns to match IRMS dataset for easy joining
  rename(
    compound = `Peak Name`,
    site = core,
    inc_temp_C = temp,
    area.FID = Area,
    rt.FID = `Retention Time`
  ) |> 
  select(sample_id, site, inc_temp_C, 
         fraction, inc_time_d, compound, rt.FID, area.FID, 
         mass_analyte_ng_per_g.FID) |> 
  # rename compounds to match putative identification
  rename_FAs()
```

## Calculate Extraction/Derivitization Efficiency

# 21:0 PC (Derivatization Efficiency)

Both extraction and derivatization efficiency are reported as yield fractions (not percent yields).

Calculate derivatization efficiency for both F3s and F2s by dividing the initial 21PC quantity by the estimated ng based on peak area.

```{r}

FID_21PC <- FID_samples |> 
  filter(`Peak Name` == "21:0") |> 
  select(sample, `Peak Name`, mass_analyte_total_ng, core, temp, inc_time_d) |> 
  rename(mass_21PC_ng = mass_analyte_total_ng) |> 
  mutate(initial_21PC_ng = 10000) |> 
  mutate(deriv_efficiency = mass_21PC_ng / initial_21PC_ng)
  
```

Calculate extraction efficiency for *only F3s* by dividing initial 23PC quantity by the estimated ng based on peak area. We do not do this for F2s because 23PC is removed from F2s during the silica chromatography step. The mean extraction efficiency for F3s will be applied to the F2s.

```{r}
# 23:0 PC (Extraction Efficiency)
FID_23PC <- FID_samples |> 
  filter(fraction == "F3", `Peak Name` == "23:0") |> 
  select(sample, `Peak Name`, mass_analyte_total_ng, core, temp, inc_time_d) |> 
  rename(mass_23PC_ng = mass_analyte_total_ng) |> 
  mutate(initial_23PC_ng = 50000) |> 
  mutate(extraction_efficiency = mass_23PC_ng / initial_23PC_ng)
```

Plot the extraction and derivatization efficiency

```{r}
FID_23PC |> 
  ggplot(
    aes(
      x = core,
      y = extraction_efficiency,
      color = as.factor(temp)
    )
  ) +
  geom_point() +
  #geom_boxplot() +
  lemon::facet_rep_wrap(vars(inc_time_d)) +
  coord_cartesian(ylim = c(0, .20)) +
  scale_y_continuous(labels = scales::label_percent(),
                     breaks = c(0, .05, .10, .15, .2),
                     sec.axis = dup_axis()) +
  scale_color_manual(values = c("#f5a607", "#0772f5", "#f50747")) +
  labs(x = "",
       y = "Extraction Efficiency",
       color = "Incubation Temperature (C)") +
  theme_bw() +
  theme(
    legend.position= "bottom",
    strip.background = element_rect(fill = "black"),
    strip.text = element_text(color = "white"),
    axis.ticks = element_line(color = "black"),
    axis.ticks.length = unit(-2.75, "pt"),
    axis.title.y.right = element_blank(),
    axis.text.y.right = element_blank()
    )


```

```{r}
FID_21PC |> 
  ggplot(
    aes(
      x = core,
      y = deriv_efficiency,
      color = as.factor(temp)
    )
  ) +
  geom_point() +
  #geom_boxplot() +
  lemon::facet_rep_wrap(vars(inc_time_d)) +
  scale_y_continuous(labels = scales::label_percent(),
                     sec.axis = dup_axis()) +
  scale_color_manual(values = c("#f5a607", "#0772f5", "#f50747")) +
  coord_cartesian(ylim = c(0, 1)) +
  labs(x = "",
       y = "Derivatization Efficiency",
       color = "Incubation Temperature (C)") +
  theme_bw() +
  theme(
    legend.position= "bottom",
    strip.background = element_rect(fill = "black"),
    strip.text = element_text(color = "white"),
    axis.ticks = element_line(color = "black"),
    axis.ticks.length = unit(-2.75, "pt"),
    axis.title.y.right = element_blank(),
    axis.text.y.right = element_blank()
    )
>>>>>>> Stashed changes
```

## Export Cache and clean environment

```{r}
saveRDS(PAIBE_external_standard, "cache/PAIBE_standard.RDS")
saveRDS(FID_sample_results, "cache/FID_sample_results.RDS")
saveRDS(FID_samples, "cache/FID_samples.RDS")
saveRDS(FID_export, "cache/FID_export.RDS")

# remove some global variables that arent useful for plotting
rm(FID_all_data_F2s)
rm(FID_results_F2s)
rm(FID_all_data_F3s)
rm(FID_results_F3s)
#rm(FID_sample_results)
```

# Exploratory plots

## Quantification

### 35m

```{r}
p_35m_phos <- FID_export |> 
  filter(site == "35m", fraction == "phospho-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 30),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str)) +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "35m | Phospho-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
p_35m_phos
```

```{r}
p_35m_gly <- FID_export |> 
  filter(site == "35m", fraction == "glyco-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 30),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str)) +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "35m | Glyco-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
p_35m_gly
```

### 54m

```{r}
p_54m_gly <- FID_export |> 
  filter(site == "54m", fraction == "glyco-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 40),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str)) +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "54m | Glyco-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
p_54m_gly
```

```{r}
p_54m_phos <- FID_export |> 
  filter(site == "54m", fraction == "phospho-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 40),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str), scales = "free_y") +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "54m | Phospho-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
p_54m_phos
```

### 83m

```{r}
p_83m_phos <- FID_export |> 
  filter(site == "83m", fraction == "phospho-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 40),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str), scales = "free_y") +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "83m | Phospho-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
p_83m_phos
```

```{r}
pUS_phos <- FID_export |> 
  filter(site == "US", fraction == "phospho-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 40),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str)) +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "83m | Glyco-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
pUS_phos
```

```{r}
FID_export |> 
  filter(site == "35m", fraction == "phospho-IPL") |> 
  # remove standards
  filter(!compound %in% c("21:0", "23:0")) |> 
  mutate(n_C = abs(parse_number(compound))) |> 
  mutate(compound = forcats::fct_reorder(compound, n_C)) |> 
  mutate(inc_temp_C_str = factor(paste(inc_temp_C, "˚C"), c("-4 ˚C", "4 ˚C", "12 ˚C"))) |> 
  ggplot(
    aes(
      x = inc_time_d,
      y = mass_analyte_ng_per_g.FID,
      group = compound,
      color = compound
    )
  ) +
  geom_point() +
  geom_line() +
  ggrepel::geom_text_repel(
    data = function(df) df |> 
      filter(inc_time_d == 180, mass_analyte_ng_per_g.FID > 30),
    aes(
      label = compound
    ),
    color = "black", nudge_x = 40, nudge_y = 10, size = 4
    ) +
  coord_cartesian(xlim = c(0, 260)) +
  scale_x_continuous(breaks = c(0, 7, 30, 180)) +
  facet_wrap(vars(inc_temp_C_str)) +
  scale_color_viridis_d(option = "plasma") +
  labs(
    x = "Incubation time (days)",
    y = "Compound mass (ng) per g permafrost",
    color = "",
    title = "35m | Phospho-IPL"
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(color = "black", face = "bold"),
    strip.text = element_text(color = "white", face = "bold", size = 16),
    strip.background = element_rect(color = "black", fill = "black"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray")
  )
```

### Save plots

```{r}
cowplot::plot_grid(
  p_35m_phos, p_35m_gly,
  p_54m_phos, p_54m_gly,
  p_83m_phos, p_83m_gly
)
```

```{r}
cowplot::save_plot(
  plot = p_83m_gly,
  filename = "fig_output/p_83m_gly.png",
  base_height = 8,
  base_width = 14
)

cowplot::save_plot(
  plot = p_83m_phos,
  filename = "fig_output/p_83m_phos.png",
  base_height = 8,
  base_width = 14
)

cowplot::save_plot(
  plot = p_54m_phos,
  filename = "fig_output/p_54m_phos.png",
  base_height = 8,
  base_width = 14
)

cowplot::save_plot(
  plot = p_54m_gly,
  filename = "fig_output/p_54m_gly.png",
  base_height = 8,
  base_width = 14
)

cowplot::save_plot(
  plot = p_35m_gly,
  filename = "fig_output/p35m_gly.png",
  base_height = 8,
  base_width = 14
)

cowplot::save_plot(
  plot = p_35m_phos,
  filename = "fig_output/p35m_phos.png",
  base_height = 8,
  base_width = 14
)
```

### PLFA profiles of all the samples?

```{r}
FID_samples |> 
  filter(fraction == "F3") |> 
  filter(core == "35m") |> 
  filter(!`Peak Name` %in% c("21:0", "23:0", "PAIBE")) |> 
  ggplot(
    aes(
      x = mass_analyte_total_ng,
      y = `Peak Name`
    )
  ) +
  geom_col() +
  facet_wrap(vars(core, temp, inc_time_d)) +
  theme_bw()
```

## Quantification for IRMS

### Are the F3 analytes quantifiable?

```{r}
p_F3s <- FID_samples_combined |>
  filter(!`Peak Name` %in% c("21:0", "23:0")) |> 
  filter(inc_time_d == 180) |> 
  ggplot(
    aes(
      x = `Peak Name`,
      y = mass_F3_ng,
      fill = quantifiable_F3
    )
  ) +
  geom_hline(yintercept = 150, color = "red") +
  geom_col() +
  scale_fill_manual(values = c("black", "#9713f0")) +
  #geom_point(aes(shape = quantifiable_F3)) +
  facet_grid(vars(core, temp), vars(inc_time_d), scales = "free_y") +
  theme_bw() +
  labs(
    title = "F3 (Phospholipids) Quantification",
    y = "Total Analyte Mass (ng)"
  ) +
  theme(
    axis.text.x = element_text(angle = 90, size = 6, hjust = 1),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "None",
    axis.title.x = element_blank()
  )
p_F3s

cowplot::save_plot(
  plot = p_F3s,
  filename = "fig_output/F3_quant.pdf",
  base_height = 11,
  base_width = 8.5
  )
```

### Are the F2s quantifiable?

```{r}
p_F2s <- FID_samples_combined |>
  filter(!`Peak Name` %in% c("21:0", "23:0")) |> 
  filter(inc_time_d == 180) |> 
  ggplot(
    aes(
      x = `Peak Name`,
      y = mass_F2_ng,
      fill = quantifiable_F2
    )
  ) +
  geom_hline(yintercept = 150, color = "red") +
  geom_col() +
  scale_fill_manual(values = c("black", "#21918a")) +
  facet_grid(vars(core, temp), vars(inc_time_d), scales = "free_y") +
  labs(
    y = "Total Analyte Mass (ng)",
    title = "F2 (Glycolipids) Quantification"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, size = 6, hjust = 1),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "None",
    axis.title.x = element_blank()
  )
p_F2s

cowplot::save_plot(
  plot = p_F2s,
  filename = "fig_output/F2_quant.pdf",
  base_height = 11,
  base_width = 8.5
  )
```

### What about the combined samples?

```{r}
p_combined <- FID_samples_combined |> 
  filter(!`Peak Name` %in% c("21:0", "23:0")) |> 
  filter(inc_time_d != 180) |> 
    rename(F2 = mass_F2_ng,
         F3 = mass_F3_ng) |> 
  pivot_longer(cols = c(F2, F3),
               names_to = "fraction",
               values_to = "mass_ng") |> 
  ggplot(
    aes(
      x = `Peak Name`,
      y = mass_ng,
      fill = fraction
    )
  ) +
  geom_hline(yintercept = 150, color = "red") +
  geom_col() +
  geom_point(
    aes(
      y = combined_sample_mass_ng,
      shape = quantifiable_combined
    ),
    size = 0.5
  ) +
  scale_shape_manual(values = c(NA, 8)) +
  facet_grid(vars(core, temp), vars(inc_time_d), scales = "free_y") +
  scale_fill_manual(values = c("#21918a", "#9713f0")) +
  labs(title = "Combined F2 + F3") +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, size = 6, hjust = 1),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "bottom"
  ) +
  guides(
    shape = "none",
    color = "none"
  )
p_combined

cowplot::save_plot(
  plot = p_combined,
  filename = "fig_output/combined_quant.pdf",
  base_height = 11,
  base_width = 8.5
  )
```
