---
title: "IRMS Data Reduction"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# How does this work?

1.  **Read and cache.** Our first step is to read in the raw .dxf files that are output from the IRMS instrument. These are large and unwieldy so our goal is to put them into an R-friendly data format. We read them in and do some cleanup using the `isoprocessor` and `isoreader` packages.

2.  **Quality control.** Next we remove files that are irrelevant to our analyses. This includes standards runs where we were doing instrument troubleshooting, Argon heating tests, cleaning blanks, etc.

3.  **Peak map**. Map compound identifications onto peaks based off of their retention time.

4.  **Export peak table**. Once we have our relevant standards and samples, we want to export them as a peak table such that we can begin our calibration process. This occurs in file `TBD`.

## Terminology

> A note on terminology throughout these scripts:
>
> -   `d2H` refers to the isotopic value of deuterium relative to VSMOW, expressed in units of permil.
>
> -   `R2H` refers to the isotopic ratio $^2R$ of deuterium
>
> -   `F2H` refers to the fractional abundance $^2F$ of deuterium
>
> -   `at2H` refers to the fractional abundance $^2F$ expressed in units of atom percent (at. %).
>
> The primary measurement for SIP calculations is `F2H`. For some plots, `at2H` may be used, or `at2H.ppm` (atom fraction in ppm instead of percent) may be used, but this can be calculated on-the-spot in the ggplot call.
>
> Isodat .dxf files output isotopic data in two formats: d2H in permil vs. VSMOW and at2H (at. %).

# Setup

```{r}
# the installation of these packages may be required
# uncomment below to install

#devtools::install_github("isoverse/isoprocessor")

#devtools::install_github("isoverse/isoreader")
```

Load the required packages

```{r}
rm(list=ls()) # Clear the environment

suppressMessages({
library(tidyverse)
library(isoprocessor)
library(isoreader)
library(isotopia)
})

message("Using isoreader version ", packageVersion("isoreader"))
message("Using isoprocessor version ", packageVersion("isoprocessor"))
```

# Load

## Import IRMS Data

```{r}
#| eval: false
data_paths <- c(
  "data/GC-IRMS/raw_data/2023-09-05_PermafrostSet1_TAC_AEM/",
  "data/GC-IRMS/raw_data/2023-11-28_TAC-AEM_New-Reactor-Permafrost-FAMEs-Enriched/"
  )

# Define VSMOW values for 2R and 2F
ref_ratio <- get_standard("2H")
ref_frac <- to_abundance(ref_ratio)
R2H_VSMOW <- ref_ratio |> as.numeric()
F2H_VSMOW <- ref_frac |> as.numeric()


# this may take a while ....
  # so we will cache this for faster reading!
  # read files
iso_files_raw <- 
  # path to data files
  data_paths |> 
  # read data files in parallel for fast read
  iso_read_continuous_flow() |> 
  # filter out files with read errors (e.g. from aborted analysis)
  iso_filter_files_with_problems()
    
# Cache it!
iso_files_raw |> iso_save("cache/iso_files_raw.cf.rds")
```

```{r}
iso_files_raw <- iso_read_continuous_flow("cache/iso_files_raw.cf.rds") |>
  # set vendor data table to isodat format
  iso_set_peak_table_from_isodat_vendor_data_table() |>
  # convert units from mV to V for amplitudes and area
  iso_convert_peak_table_units(V = mV, Vs = mVs)
```

## Process IRMS data

```{r}
# process IRMS file information
iso_files <- iso_files_raw |> 
  # parse text info into numbers
  iso_mutate_file_info(
    # what is the type of each analysis?
    analysis = parse_number(Analysis) |> as.integer(),
    type = case_when(
      str_detect(`Identifier 1`, "p35") ~ "sample",
      str_detect(`Identifier 1`, "p54") ~ "sample",
      str_detect(`Identifier 1`, "p83") ~ "sample",
      str_detect(`Identifier 1`, "pUS") ~ "sample",
      str_detect(`Identifier 1`, "HDK") ~ "sample",
      str_detect(`Identifier 1`, "[Zz]ero")      ~ "on_off",
      str_detect(`Identifier 1`, "H3")           ~ "H3_factor",
      str_detect(`Identifier 1`, "F8")           ~ "F8",
      str_detect(`Identifier 1`, "FH_5")         ~ "FH5",
      str_detect(`Identifier 1`, "FSH_9")        ~ "FSH9",
      str_detect(`Identifier 1`, "BAME")         ~ "BAME",
      str_detect(`Identifier 1`, "cHEX|[Bblank]")~ "blank"
    ),
    # what is the injedction volume? infer from AS method
    injection_volume = str_extract(`Identifier 2`, "[0-9.]+u[lL]") |>
      parse_number() |> iso_double_with_units("uL"),
    # what was the concentration? (assuming Preparation = concentration or volume)
    concentration = 
      ifelse(
        str_detect(type, "std"),  
        str_extract(Preparation, "[0-9.]+ ?ng( per |/)u[Ll]") |> 
          parse_number() |> iso_double_with_units("ng/uL"),
        NA),
    rep = !is.na(Comment) & str_detect(Comment, "rep"),
    # what folder are the data files in? (assuming folder = sequence)
    folder = basename(dirname(file_path))
  ) |> 
  # focus only on the relevant file info, discarding the rest
  iso_select_file_info(
    folder, Analysis, analysis, file_datetime, sample_id = `Identifier 1`, 
    type, rep, injection_volume, concentration
  )

# show the first few rows
iso_files[1:10] |> iso_get_file_info() |> knitr::kable()

# summarize the types
iso_files |> iso_get_file_info() |> count(type) |> arrange(desc(n))
```

## Plot an example chromatogram

```{r}
iso_files |>  
  # choosing arbitrary file to plot
  iso_filter_files(Analysis == "BF16739") |>
  iso_plot_continuous_flow_data(
    # select data and aesthetics
    data = c(2), color = sample_id, panel = NULL,
    # zoom in on time interval
    time_interval = c(550, 1500),
    # peak labels for all peaks > 2V
    peak_bounds = TRUE,
    peak_marker = FALSE,
    peak_label = iso_format(rt),
    #peak_label_size = 3,
    peak_label_filter = amp2 > 1,
  ) + theme_classic()

example_data <- iso_files |> 
  iso_filter_files(Analysis == "BF16739") |>
  iso_get_raw_data()

p_example_chroma <- example_data |> 
  filter(time.s > 600 & time.s < 1200) |> 
  ggplot(
    aes(x = time.s, y = v2.mV, color = v2.mV)
  ) +
  geom_line(linewidth = 0.7, color = "#00bbff") +
  theme_classic() +
  theme(legend.position = "None",
        axis.line = element_blank(), 
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank())

cowplot::save_plot(plot = p_example_chroma, 
                   filename = "fig_output/example_chromatogram.pdf",
                   base_height = 4, base_width = 4)
```

## Inspect the file info

```{r}
iso_files |> 
  iso_get_file_info() |> 
  select(-file_id, -folder) |> 
  iso_make_units_explicit() |> 
  gt::gt() |> 
  gt::data_color(columns = type, palette = "Set1") 
```

# Map

## Map peaks and filter out problematic injections

```{r}
# this is a map of retention times for specific compounds across injections
peak_map <- readxl::read_excel(path = "data/GC-IRMS/IRMS_peak_map.xlsx")

# this is a list of analyses to ignore
ignored_analyses <- readxl::read_excel("data/GC-IRMS/ignored_injection_list.xlsx") |> pull(Analysis)

# mapped peaks
iso_files_mapped <- 
  iso_files |> 
  # remove analyses that were misinjections
  filter(!Analysis %in% ignored_analyses) |>
  # map samples and standards peaks (no BAMEs mapped?)
  iso_filter_files(type %in% c("F8", "FH5", "FSH9", "sample")) |>
  iso_map_peaks(peak_map, map_id = Analysis)
```

## Inspect mapped peaks

```{r}
# plot an example
iso_files_mapped |>
  iso_filter_files(sample_id %in% c("p54(12C)30d-F3", "HDK23-168")) |>
  iso_plot_continuous_flow_data(
    data = c(2), color = sample_id, panel = NULL,
    time_interval = c(550, 1500),
    peak_label=iso_format(compound, rt, d2H, signif = 3),
    peak_label_filter = !compound %in% 
      c("H2") & data_wo_units == "2" & !is.na(d2H) & amp2 > 1,
    peak_label_options = list(size = 3)
  ) + theme_bw() +
  facet_wrap(vars(sample_id), ncol = 1)
```

```{r}
# peak mappings summary (a few random files)
set.seed(123)
random <- sample(1:length(iso_files_mapped), size = 10)
iso_files_mapped[random] |> iso_summarize_peak_mappings()
```

# Peak Table

## Calculate d3/2 vs reference gas

Here we calculate the d2H versus the reference gas (H2).

For each instrument run, reference gas (H2) is injected at the beginning and end of the run.

1.  We measure the `r3/2` of each of these reference peaks as a function of their retention time and calculate a linear model of `r3/2` vs. `rt`.
2.  We linearly interpolate this model across all retention times so that we have estimated reference gas values over the course of the run.
3.  We calculate a delta value of d2H versus the reference gas where $\delta^{^2H}_{ref(H_2)} = \: ((^2R / ^2R_{ref}) - 1) * 1000 \: permil$

```{r}
iso_peak_table <- iso_files_mapped |> 
  # focus 
  iso_get_peak_table(include_file_info = everything()) |> 
  # calculate d2H vs ref peak
  group_by(file_id) |>
  mutate(
    # the reference ratio at a specific retention time:
    ref_ratio_at_rt = 
      # linear model of
      lm(y ~ x, 
         data = tibble(
           x = rt[calib_peak == TRUE], # retention time of H2 peak
           y = `r3/2`[calib_peak == TRUE])) |> # versus the R2H of the H2 peak
      predict(newdata = tibble(x = rt)) |> # use the lm and feed rt values in
      as.numeric(),
    d2H_vs_H2 = (`r3/2` / ref_ratio_at_rt - 1) * 1000 # switch to delta notation
  ) |>
  ungroup() |>
  iso_mutate_peak_table(
    group_by = file_id,
    # rel area = area / area of all compound peaks
    rel_area = area2/sum(area2[!is.na(compound) & compound != "H2"], na.rm=TRUE),
    # mean area = mean of all area
    mean_area = mean(area2, na.rm=TRUE),
    # mean area of identified peaks = mean area where peak is mapped
    mean_area_identified = mean(area2[!is.na(compound) & compound != "H2"], na.rm=TRUE),
    # standard deviation of identified peaks areas
    mean_area_identified_sd = sd(area2[!is.na(compound) & compound != "H2"], na.rm=TRUE),
    # mean amplitude of identified peaks
    mean_amp_identified = mean(amp2[!is.na(compound) & compound != "H2"], na.rm=TRUE)
  )

# create a plot to inspect the reference gas change over time
p_h2_lm <- iso_peak_table |> 
  ggplot(aes(
    x = rt, y = ref_ratio_at_rt,
    group = file_id, label = Analysis
  )) +
  geom_line(alpha = 0.5) +
  geom_point(
    data = function(df) df |> filter(compound == "H2"),
    aes(
      x = rt,
      y = `r3/2`,
    )
  ) +
  labs(
    y = "Ref Ratio"
  ) +
  theme_bw()
p_h2_lm
```

## Reference peak outliers

```{r}
# set the ref peak acceptable range as + or - 4 permil from the mean of all ref peaks
pm_permil <- 4

# make a tibble with just the H2 ref peaks in it:
ref_peaks <- iso_peak_table |> filter(!is.na(ref_nr))

# Examine how the reference peaks deviate and identify outliers:
ref_peaks |>
  arrange(ref_nr, analysis) |>
  mutate(
    # add a new sample label
    x = sprintf("%s: %s", analysis, type) |> as_factor(),
    # 
    ref_info=paste0(ref_nr, ifelse(!is.na(calib_peak) & calib_peak,"*","")) |>
      as_factor()
  ) |>
  # use isoverse function to examine ref peaks
  iso_plot_ref_peaks(
    x = x, ratio=c('r3/2'), fill=ref_info,
    panel_scales="fixed"
  ) |>
  iso_mark_value_range(plus_minus_value = pm_permil, plus_minus_sd = c()) |> 
  iso_mark_outliers(plus_minus_value = pm_permil, label = analysis) +  
  labs(x="Sequence #", fill="Reference\npeak") 

# mark analyses with ref peak outliers in dataset (vs. raw measured ratios)
outliers <- ref_peaks |> 
  iso_identify_outliers(
    y = 1000 * (`r3/2`/mean(`r3/2`) - 1), 
    plus_minus_value = pm_permil, 
    group_by = file_id
  ) |> 
  filter(is_outlier) |> 
  pull(analysis) |> 
  unique()

msg <- sprintf("ref peaks deviate > %s permil in r3/2", pm_permil)
sprintf("marking seq_nrs %s because %s", paste(outliers, collapse = ", "), msg) |> 
  message()

# tag outliers
iso_peak_table <- iso_peak_table |>
 mutate(ref_peak_outliers = analysis %in% outliers)

# which samples have outlying ref peaks?
iso_peak_table |> 
  filter(ref_peak_outliers) |> 
  select(Analysis, sample_id, ref_peak_outliers) |> unique() |> 
  gt::gt()

# Looks like all samples with reference peak outliers are the extremely enriched 180d incubations
```

# Export

Export just the analyte peaks (not the H2 peaks)

```{r}
# write .xlsx to data directory
iso_peak_table |> 
  filter(is.na(ref_nr)) |>
  writexl::write_xlsx(path = "data/GC-IRMS/iso_peak_table_mapped.xlsx")

# write .RDS to cache
iso_peak_table |> 
  filter(is.na(ref_nr)) |>
  write_rds(file = "cache/iso_peak_table_mapped.RDS")
```
